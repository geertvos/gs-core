package net.geertvos.gvm.core;

import java.util.Stack;
import java.util.concurrent.CountDownLatch;

import net.geertvos.gvm.core.Type.Operations;
import net.geertvos.gvm.program.GVMContext;
import net.geertvos.gvm.program.GVMFunction;
import net.geertvos.gvm.program.GVMHeap;
import net.geertvos.gvm.program.GVMProgram;
import net.geertvos.gvm.streams.RandomAccessByteStream;

public class GVMThread {

	private final GVMProgram program;
	private final GVMHeap heap;

	private int framepointer;
	private int functionPointer;
	private int debugLineNumber = -1;
	private final Stack<StackFrame> callStack = new Stack<>();
	private final Stack<Value> stack = new Stack<Value>();
	private RandomAccessByteStream executingBytecode;

	private int location; //reference to the name of this module/file/source

	private CountDownLatch threadFinishedLatch = new CountDownLatch(1); 
	
	public GVMThread(GVMProgram program, GVMHeap heap) {
		this.framepointer = 0;
		this.functionPointer = 0;
		this.debugLineNumber = -1;
		this.heap = heap;
		this.program = program;
	}
	
	public int getFramepointer() {
		return framepointer;
	}

	public void setFramepointer(int framepointer) {
		this.framepointer = framepointer;
	}

	public int getFunctionPointer() {
		return functionPointer;
	}

	public void setFunctionPointer(int functionPointer) {
		this.functionPointer = functionPointer;
	}

	public int getDebugLineNumber() {
		return debugLineNumber;
	}

	public void setDebugLineNumber(int debugLineNumber) {
		this.debugLineNumber = debugLineNumber;
	}

	public RandomAccessByteStream getBytecode() {
		return executingBytecode;
	}

	public void setBytecode(RandomAccessByteStream bytecode) {
		this.executingBytecode = bytecode;
	}

	public GVMProgram getProgram() {
		return program;
	}

	public int getLocation() {
		return location;
	}

	public void setLocation(int location) {
		this.location = location;
	}

	public Stack<Value> getStack() {
		return stack;
	}

	public Stack<StackFrame> getCallStack() {
		return callStack;
	}
	
	private boolean peel()
	{
		//Do not peel the values pushed by the VM itself
		if( callStack.size() == 1 )
			return false;
		
		//Remove local variables and parameters
		while( callStack.size() > getFramepointer() )
			callStack.pop();
		
		StackFrame frame =  callStack.pop();
		setDebugLineNumber(frame.getLineNumber());
		setFunctionPointer(frame.getCallingFunction()); //Function pointer
		setFramepointer(frame.getFramePointer());
		setLocation(frame.getLocation());
		int pc = frame.getProgramCounter(); //PC
		setBytecode(program.getFunction(getFunctionPointer()).getBytecode().clone());
		getBytecode().seek(pc);
		return true;
	}
	
	void markThreadFinished() {
		threadFinishedLatch.countDown();
	}
	
	void awaitFinished() {
		try {
			threadFinishedLatch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	void handleException(String message)
	{
		GVMContext context = new GVMContext(program, heap, this);
		Value value = program.getExceptionHandler().convert(message, context, getDebugLineNumber(), getLocation());
		handleExceptionObject(value);
	}
	
	/**
	 * Handle the exception in the current function. When this function has no exception handler attached, the function
	 * is peeled from the stack and the underlying function is checked.
	 * @param message The error message generated by the VM
	 */
	void handleExceptionObject(Value exception)
	{
		//Locate the catch block (if there is one)
		GVMFunction f = program.getFunction(getFunctionPointer());
		int catchBlock = f.getExceptionHandler(getBytecode().getPointerPosition());
		if( catchBlock > -1 )
		{
			//Catch block located, push error message on the stack
			getStack().push(exception);
			//And relocate the program counter
			getBytecode().seek(catchBlock);
		} else {
			//No catch block found, see if we can peel off the current function from the stack
			if( peel() )
			{
				//We peeled one off, recursively handle the exception.
				handleExceptionObject(exception);
			} else {
				String message = "Unhandled unknown exception";
				if(exception.getType().supportsOperation(Operations.GET)) {
					GVMObject exceptionObj = heap.getObject(exception.getValue());
					//TODO: THis will become language dependent
					String exceptionMsg = program.getString(exceptionObj.getValue("message").getValue());
					int exceptionLine = exceptionObj.getValue("line").getValue();
					message = String.format("Unhandled exception '%s' at line %d", exceptionMsg, exceptionLine); 
				}
				System.err.println(message);
				System.exit(1);
			}
		}
	}

	
}
